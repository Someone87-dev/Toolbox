'use client';

import { useFormState, useFormStatus } from 'react-dom';
import ToolPageLayout from '@/components/ToolPageLayout';
import { Textarea } from '@/components/ui/textarea';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Loader2 } from 'lucide-react';
import { handleSummarizeText, type SummarizeFormState } from './actions';

function SubmitButton() {
  const { pending } = useFormStatus();
  return (
    <Button type="submit" disabled={pending} className="w-full sm:w-auto">
      {pending ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
      Summarize Text
    </Button>
  );
}

export default function TextSummarizerPage() {
  const initialState: SummarizeFormState = {};
  const [state, formAction] = useFormState(handleSummarizeText, initialState);

  return (
    <ToolPageLayout title="AI Text Summarizer" description="Enter text below to get a concise summary generated by AI.">
      <form action={formAction} className="space-y-6">
        <div>
          <label htmlFor="textToSummarize" className="block text-sm font-medium text-foreground mb-1">
            Text to Summarize
          </label>
          <Textarea
            id="textToSummarize"
            name="text"
            placeholder="Paste your long text here (min 10 characters, max 10,000 characters)..."
            rows={12}
            className="resize-y"
            required
            aria-describedby="text-error"
          />
          {state?.fieldErrors?.text && (
            <p id="text-error" className="text-sm text-destructive mt-1">
              {state.fieldErrors.text.join(', ')}
            </p>
          )}
        </div>
        <SubmitButton />
      </form>

      {state?.error && (
        <Alert variant="destructive" className="mt-6">
          <AlertTitle>Error</AlertTitle>
          <AlertDescription>{state.error}</AlertDescription>
        </Alert>
      )}

      {state?.summary && (
        <Card className="mt-8">
          <CardHeader>
            <CardTitle className="font-headline">Summary</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="p-4 bg-muted/30 rounded-md prose max-w-none dark:prose-invert">
              <p className="whitespace-pre-line">{state.summary}</p>
            </div>
          </CardContent>
        </Card>
      )}
    </ToolPageLayout>
  );
}
